{"componentChunkName":"component---src-pages-components-overlay-mdx","path":"/components/overlay/","result":{"data":{"Tooltip":{"composes":null,"displayName":"Tooltip","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"id","doclets":[{"tag":"type","value":"{string|number}"},{"tag":"required","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An html id attribute, necessary for accessibility</p>"}},"required":true,"type":{"name":"string|number","value":null,"raw":"isRequiredForA11y(\n  PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n)"}},{"name":"noArrow","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Remove arrow</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"placement","doclets":[],"defaultValue":{"value":"'right'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Sets the direction the Tooltip is positioned towards.</p>\n<p>This is generally provided by the <code class=\"language-text\">Overlay</code> component positioning the tooltip</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'auto-start'","computed":false},{"value":"'auto'","computed":false},{"value":"'auto-end'","computed":false},{"value":"'top-start'","computed":false},{"value":"'top'","computed":false},{"value":"'top-end'","computed":false},{"value":"'right-start'","computed":false},{"value":"'right'","computed":false},{"value":"'right-end'","computed":false},{"value":"'bottom-end'","computed":false},{"value":"'bottom'","computed":false},{"value":"'bottom-start'","computed":false},{"value":"'left-end'","computed":false},{"value":"'left'","computed":false},{"value":"'left-start'","computed":false}],"raw":null}},{"name":"arrowProps","doclets":[{"tag":"type","value":"{{ ref: ReactRef, style: Object }}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An Overlay injected set of props for positioning the tooltip arrow.</p>\n<p>This is generally provided by the <code class=\"language-text\">Overlay</code> component positioning the tooltip</p>"}},"required":false,"type":{"name":"{ ref: ReactRef, style: Object }","value":{"ref":{"name":"any","required":false},"style":{"name":"object","required":false}},"raw":null}},{"name":"variant","doclets":[],"defaultValue":{"value":"'black'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The Tooltip visual variant</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'white'","computed":false},{"value":"'black'","computed":false}],"raw":null}},{"name":"scheduleUpdate","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"outOfBoundaries","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"any","value":null,"raw":null}}]},"Overlay":{"composes":null,"displayName":"Overlay","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"show","doclets":[{"tag":"default","value":"false"}],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Set the visibility of the Overlay</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"placement","doclets":[{"tag":"default","value":"'top'"}],"defaultValue":{"value":"'top'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Specify where the overlay element is positioned in relation to the target element\nRefer to the <a href=\"https://popper.js.org/index.html#placements\" target=\"_blank\" rel=\"noopener noreferrer\">placement docs</a> for more info</p>"}},"required":false,"type":{"name":"enum","value":"PopperJS.placements","raw":null}},{"name":"target","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM Element, Ref to an element, or function that returns either. The <code class=\"language-text\">target</code> element is where\nthe overlay is positioned relative to.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"container","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A DOM Element, Ref to an element, or function that returns either. The <code class=\"language-text\">container</code> will have the Portal children\nappended to it.</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"flip","doclets":[{"tag":"default","value":"true"}],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Enables the Popper.js <code class=\"language-text\">flip</code> modifier, allowing the Overlay to\nautomatically adjust it's placement in case of overlap with the viewport or toggle.\nRefer to the <a href=\"https://popper.js.org/popper-documentation.html#modifiers..flip.enabled\" target=\"_blank\" rel=\"noopener noreferrer\">flip docs</a> for more info</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"popperConfig","doclets":[],"defaultValue":{"value":"{}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A set of popper options and props passed directly to react-popper's Popper component.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"children","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A render prop that returns an element to overlay and position. See\nthe <a href=\"https://github.com/FezVrasta/react-popper#children\" target=\"_blank\" rel=\"noopener noreferrer\">react-popper documentation</a> for more info.</p>"}},"required":true,"type":{"name":"func","value":null,"raw":null}},{"name":"containerPadding","doclets":[],"defaultValue":{"value":"8","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Control how much space there is between the edge of the boundary element and overlay.\nA convenience shortcut to setting <code class=\"language-text\">popperConfig.modfiers.preventOverflow.padding</code></p>"}},"required":false,"type":{"name":"number","value":null,"raw":null}},{"name":"onHide","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback invoked by the overlay when it wishes to be hidden. Required if\n<code class=\"language-text\">rootClose</code> is specified.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"rootClose","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify whether the overlay should trigger <code class=\"language-text\">onHide</code> when the user clicks outside the overlay</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"rootCloseEvent","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify event for toggling overlay</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'click'","computed":false},{"value":"'mousedown'","computed":false}],"raw":null}},{"name":"rootCloseDisabled","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify disabled for disable RootCloseWrapper</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"transition","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A <code class=\"language-text\">react-transition-group@2.0.0</code> <code class=\"language-text\">&lt;Transition/&gt;</code> component\nused to animate the overlay as it changes visibility.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"OverlayTrigger":{"composes":null,"displayName":"OverlayTrigger","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"children","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":true,"type":{"name":"element","value":null,"raw":null}},{"name":"trigger","doclets":[{"tag":"type","value":"{'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>}"}],"defaultValue":{"value":"['hover', 'focus']","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Specify which action or actions trigger Overlay visibility</p>"}},"required":false,"type":{"name":"'hover' | 'click' |'focus' | Array<'hover' | 'click' |'focus'>","value":[{"name":"custom","raw":"triggerType"},{"name":"arrayOf","value":{"name":"custom","raw":"triggerType"}}],"raw":null}},{"name":"delay","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A millisecond delay amount to show and hide the Overlay once triggered</p>"}},"required":false,"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"show":{"name":"number","required":false},"hide":{"name":"number","required":false}}}],"raw":null}},{"name":"hoverOverlay","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>If true, also register hover events to overlay. Must use with delay.hide and hover trigger.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"defaultShow","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The initial visibility state of the Overlay. For more nuanced visibility\ncontrol, consider using the Overlay component directly.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"overlay","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An element or text to overlay next to the target.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"func"},{"name":"element"}],"raw":null}},{"name":"popperConfig","doclets":[],"defaultValue":{"value":"{}","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A Popper.js config object passed to the the underlying popper instance.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"target","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"enum","value":[{"value":"null","computed":false}],"raw":null}},{"name":"onHide","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"enum","value":[{"value":"null","computed":false}],"raw":null}},{"name":"show","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"enum","value":[{"value":"null","computed":false}],"raw":null}}]}},"pageContext":{"frontmatter":{"title":"Overlay"}}},"staticQueryHashes":["2468095761","3167400025"]}