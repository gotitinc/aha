{"version":3,"sources":["webpack:///./src/pages/layout/flex-box.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","exampleClassName","codeText","directionRow","directionColumn","justifyContent","alignItems","alignSelf","wrapFlexbox","wrapFlexbox2","alignContent","fillFlexbox","growFlexbox","shrinkFlexbox","autoMargin","withAlignItem","orderFlexbox","isMDXComponent"],"mappings":"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","file":"component---src-pages-layout-flex-box-mdx-360645650b304811060a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/uendno/source-code/gotit/aha/src/layouts/ApiLayout.js\";\nimport CodeView from 'src/components/CodeView';\nimport directionRow from 'src/examples/CSS/Flexbox/directionRow';\nimport directionColumn from 'src/examples/CSS/Flexbox/directionColumn';\nimport justifyContent from 'src/examples/CSS/Flexbox/justifyContent';\nimport alignItems from 'src/examples/CSS/Flexbox/alignItems';\nimport alignSelf from 'src/examples/CSS/Flexbox/alignSelf';\nimport wrapFlexbox from 'src/examples/CSS/Flexbox/wrap';\nimport wrapFlexbox2 from 'src/examples/CSS/Flexbox/wrap2';\nimport alignContent from 'src/examples/CSS/Flexbox/alignContent';\nimport fillFlexbox from 'src/examples/CSS/Flexbox/fill';\nimport growFlexbox from 'src/examples/CSS/Flexbox/grow';\nimport shrinkFlexbox from 'src/examples/CSS/Flexbox/shrink';\nimport autoMargin from 'src/examples/CSS/Flexbox/autoMargin';\nimport withAlignItem from 'src/examples/CSS/Flexbox/withAlignItem';\nimport orderFlexbox from 'src/examples/CSS/Flexbox/order';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"flexbox\"\n    }}>{`Flexbox`}</h1>\n    <p>{`Quickly manage the layout, alignment, and sizing of grid columns, navigation, components, and more with a full suite of responsive flexbox utilities. For more complex implementations, custom CSS may be necessary`}</p>\n    <h2 {...{\n      \"id\": \"base\"\n    }}>{`Base`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-flex`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`.u-flexInline`}</inlineCode>{` to enable flex behaviors`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={`<div class=\"u-flex u-paddingExtraSmall b-highlight\">I'm a flexbox container!</div>`} mdxType=\"CodeView\" />\n    <CodeView exampleClassName=\"example-flexbox\" codeText={`<div class=\"u-flexInline u-paddingExtraSmall b-highlight\">I'm a inline flexbox container!</div>`} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"direction\"\n    }}>{`Direction`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-flexRow`}</inlineCode>{` to set a horizontal direction (the browser default), or `}<inlineCode parentName=\"p\">{`.u-flexRowReverse`}</inlineCode>{` to start the horizontal direction from the opposite side`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={directionRow} mdxType=\"CodeView\" />\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-flexColumn`}</inlineCode>{` to set a vertical direction, or `}<inlineCode parentName=\"p\">{`.u-flexColumnReverse`}</inlineCode>{` to start the vertical direction from the opposite side.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={directionColumn} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"justify-content\"\n    }}>{`Justify content`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-justifyContent{X}`}</inlineCode>{` on flexbox containers to change the alignment of flex items on the main axis (the x-axis to start, y-axis if flex-direction: column). Choose `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` from Start (browser default), End, Center, Between, or Around.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={justifyContent} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"align-items\"\n    }}>{`Align items`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-alignItems{X}`}</inlineCode>{` on flexbox containers to change the alignment of flex items on the cross axis (the x-axis to start, y-axis if flex-direction: column). Choose `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` from Start, End, Center, Baseline, or Stretch(browser default).`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={alignItems} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"align-self\"\n    }}>{`Align self`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-alignSelf{X}`}</inlineCode>{` on flexbox items to individually change their alignment on the cross axis (the y-axis to start, x-axis if flex-direction: column). Choose `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` from the same options as align-items: Start, End, Center, Baseline, or Stretch (browser default)`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={alignSelf} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"wrap\"\n    }}>{`Wrap`}</h2>\n    <p>{`Change how flex items wrap in a flex container. Choose from no wrapping at all (the browser default) with `}<inlineCode parentName=\"p\">{`.u-flexNoWrap`}</inlineCode>{`, wrapping with `}<inlineCode parentName=\"p\">{`.u-flexWrap`}</inlineCode>{`, or reverse wrapping with `}<inlineCode parentName=\"p\">{`.u-flexWrapReverse`}</inlineCode>{`.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={wrapFlexbox} mdxType=\"CodeView\" />\n    <CodeView exampleClassName=\"example-flexbox\" codeText={wrapFlexbox2} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"align-content\"\n    }}>{`Align content`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-alignContent{X}`}</inlineCode>{` on flexbox containers to align flex items together on the cross axis. Choose `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` from Start (browser default), End, Center, Between, Around, or Stretch. To demonstrate these utilities, we’ve enforced flex-wrap: wrap and increased the number of flex items.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={alignContent} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"fill\"\n    }}>{`Fill`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`.u-flexFill`}</inlineCode>{` class on a series of sibling elements to force them into widths equal to their content (or equal widths if their content does not surpass their border-boxes) while taking up all available horizontal space.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={fillFlexbox} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"grow-and-shrink\"\n    }}>{`Grow and shrink`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-flexGrow-*`}</inlineCode>{`  utilities to toggle a flex item’s ability to grow to fill available space. In the example below, the `}<inlineCode parentName=\"p\">{`.u-flexGrow1`}</inlineCode>{` elements uses all available space it can, while allowing the remaining two flex items their necessary space.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={growFlexbox} mdxType=\"CodeView\" />\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.u-flexShrink-*`}</inlineCode>{` utilities to toggle a flex item’s ability to shrink if necessary. In the example below, the second flex item with `}<inlineCode parentName=\"p\">{`.u-flexShrink1`}</inlineCode>{` is forced to wrap it’s contents to a new line, “shrinking” to allow more space for the previous flex item with `}<inlineCode parentName=\"p\">{`.u-widthFull`}</inlineCode>{`.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={shrinkFlexbox} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"auto-margins\"\n    }}>{`Auto margins`}</h2>\n    <p>{`Flexbox can do some pretty awesome things when you mix flex alignments with auto margins. Shown below are three examples of controlling flex items via auto margins: default (no auto margin), pushing two items to the right (`}<inlineCode parentName=\"p\">{`.u-marginRightAuto`}</inlineCode>{`), and pushing two items to the left (`}<inlineCode parentName=\"p\">{`.u-marginLeftAuto`}</inlineCode>{`).`}</p>\n    <p><strong parentName=\"p\">{`Unfortunately, IE10 and IE11 do not properly support auto margins on flex items whose parent has a non-default justify-content value.`}</strong>{` See this `}<a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/a/37535548\"\n      }}>{`StackOverflow answer`}</a>{` for more details.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={autoMargin} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"with-align-items\"\n    }}>{`With align-items`}</h2>\n    <p>{`Vertically move one flex item to the top or bottom of a container by mixing `}<inlineCode parentName=\"p\">{`align-items`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`flex-direction: column`}</inlineCode>{`, and  `}<inlineCode parentName=\"p\">{`margin-top: auto`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`margin-bottom: auto`}</inlineCode>{`.`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={withAlignItem} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"order\"\n    }}>{`Order`}</h2>\n    <p>{`Change the visual order of specific flex items with a handful of `}<inlineCode parentName=\"p\">{`order`}</inlineCode>{` utilities. We only provide options for making an item first or last, as well as a reset to use the DOM order.Choose one of from `}<inlineCode parentName=\"p\">{`.u-flexOrderFirst`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`.u-flexOrderLast`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`.u-flexOrderNone`}</inlineCode>{`  (browser default)`}</p>\n    <CodeView exampleClassName=\"example-flexbox\" codeText={orderFlexbox} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"responsive-classes\"\n    }}>{`Responsive classes`}</h2>\n    <p>{`The flexbox includes six tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sm:u-X`}</inlineCode>{`  - To use at the smallest Media Query breakpoint.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`md:u-X`}</inlineCode>{`  - To use at the medium Media Query breakpoint.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lg:u-X`}</inlineCode>{`  - To use at the large Media Query breakpoint.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`xl:u-X`}</inlineCode>{`  - To use at the extra large or desktop Media Query breakpoint.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`xxl:u-X`}</inlineCode>{`  - To use at the monitor Media Query breakpoint.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}