{"version":3,"sources":["webpack:///./src/pages/components/overlay.mdx","webpack:///./src/assets/structure/stb_tooltips-structure@2x.jpg","webpack:///./src/assets/structure/stb_tooltips-structure.jpg"],"names":["_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","require","srcSet","className","alt","codeText","basicOverlay","triggerOverlay","shortTooltip","longTooltip","shortTooltipWhite","basicDelay","delayWithHoverOverlay","metadata","data","Overlay","OverlayTrigger","exportedBy","Tooltip","isMDXComponent","module","exports"],"mappings":"uZA+BaA,EAAe,GACtBC,EAAc,CAClBC,MAfmB,aAgBnBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,iBAAeF,EAAiBM,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,mBAAQ,CACN,GAAM,WADR,WAGA,mBAAQ,CACN,GAAM,gBADR,gBAGA,wHACA,mBAAQ,CACN,GAAM,aADR,WAGA,uBAAG,4BAAYC,WAAW,KAAvB,WAAH,qLACA,mBAAQ,CACN,GAAM,mBADR,mBAGA,gGAA6E,4BAAYA,WAAW,KAAvB,qBAA7E,8JACA,mBAAQ,CACN,GAAM,YADR,YAGA,oOACA,qBAAKC,IAAKC,EAAQ,QAAoDC,OAAWD,EAAQ,QAAb,MAAyEE,UAAU,iBAAiBC,IAAI,YACpL,oBAAID,UAAU,8BAChB,gCAEE,mBAAGA,UAAU,aAAb,sEAEF,qCAEE,mBAAGA,UAAU,aAAb,gDAEF,gCAEE,mBAAGA,UAAU,aAAb,+HAGA,mBAAQ,CACN,GAAM,YADR,YAGA,mBAAQ,CACN,GAAM,SADR,SAGA,2CAAwB,4BAAYJ,WAAW,KAAvB,WAAxB,oCAAgH,4BAAYA,WAAW,KAAvB,WAAhH,eACA,cAAC,IAAD,CAAUM,SAAUC,IAAcR,QAAQ,aAC1C,oCAAiB,4BAAYC,WAAW,KAAvB,WAAjB,kBAAuF,4BAAYA,WAAW,KAAvB,mBAAvF,aACA,cAAC,IAAD,CAAUM,SAAUE,IAAgBT,QAAQ,aAC5C,mBAAQ,CACN,GAAM,qBADR,qBAGA,yCACA,cAAC,IAAD,CAAUO,SAAUG,IAAcV,QAAQ,aAC1C,wCACA,cAAC,IAAD,CAAUO,SAAUI,IAAaX,QAAQ,aACzC,mBAAQ,CACN,GAAM,SADR,SAGA,cAAC,IAAD,CAAUO,SAAUK,IAAmBZ,QAAQ,aAC/C,mBAAQ,CACN,GAAM,SADR,SAGA,uCACA,cAAC,IAAD,CAAUO,SAAUM,IAAYb,QAAQ,aACxC,+FAA4E,4BAAYC,WAAW,KAAvB,SAA5E,QAAsI,4BAAYA,WAAW,KAAvB,gBAAtI,KACA,cAAC,IAAD,CAAUM,SAAUO,IAAuBd,QAAQ,aACnD,mBAAQ,CACN,GAAM,oBADR,oBAGA,8BACA,mBAAQ,CACN,GAAM,OADR,OAGA,cAAC,IAAD,CAAce,SAAUhB,EAAMiB,KAAKC,QAASjB,QAAQ,iBACpD,cAAC,IAAD,CAAce,SAAUhB,EAAMiB,KAAKE,eAAgBC,WAAYpB,EAAMiB,KAAKC,QAASjB,QAAQ,iBAC3F,cAAC,IAAD,CAAce,SAAUhB,EAAMiB,KAAKI,QAASpB,QAAQ,kBAMxDH,EAAWwB,gBAAiB,G,qBC3H5BC,EAAOC,QAAU,IAA0B,yE,qBCA3CD,EAAOC,QAAU,IAA0B","file":"component---src-pages-components-overlay-mdx-995d168d1c84907c1f68.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/uendno/source-code/gotit/aha/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from 'src/components/ComponentApi';\nimport CodeView from 'src/components/CodeView';\nimport basicOverlay from 'src/examples/Overlay/default';\nimport triggerOverlay from 'src/examples/Overlay/trigger';\nimport shortTooltip from 'src/examples/Overlay/tooltip';\nimport shortTooltipWhite from 'src/examples/Overlay/tooltipWhite';\nimport longTooltip from 'src/examples/Overlay/tooltipLong';\nimport basicDelay from 'src/examples/Overlay/basicDelay';\nimport delayWithHoverOverlay from 'src/examples/Overlay/delayWithHoverOverlay';\nexport const query = graphql`\n  query OverlayQuery {\n    Tooltip: componentMetadata(displayName: { eq: \"Tooltip\" }) {\n      ...ComponentApi_metadata\n    }\n    Overlay: componentMetadata(displayName: { eq: \"Overlay\" }) {\n      ...ComponentApi_metadata\n    }\n    OverlayTrigger: componentMetadata(displayName: { eq: \"OverlayTrigger\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"overlay\"\n    }}>{`Overlay`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`A set of components for positioning beautiful overlays, tooltips, and anything else you need.`}</p>\n    <h3 {...{\n      \"id\": \"overlay-1\"\n    }}>{`Overlay`}</h3>\n    <p><inlineCode parentName=\"p\">{`Overlay`}</inlineCode>{` is the fundamental component for positioning and controlling tooltip visibility. It's a wrapper around react-popper, that adds support for transitions, and visibility toggling.`}</p>\n    <h3 {...{\n      \"id\": \"overlay-trigger\"\n    }}>{`Overlay trigger`}</h3>\n    <p>{`Since the above pattern is pretty common, but verbose, we've included `}<inlineCode parentName=\"p\">{`<Overlay.Trigger>`}</inlineCode>{`  component to help with common use-cases. It even has functionality to delayed show or hides, and a few different \"trigger\" events you can mix and match.`}</p>\n    <h3 {...{\n      \"id\": \"tooltips\"\n    }}>{`Tooltips`}</h3>\n    <p>{`Tooltips provide a small amount of information to an element on hover. Typically, tooltips are used to help users understand the meaning or purpose of icons, showing the full version of truncated text.`}</p>\n    <img src={require('src/assets/structure/stb_tooltips-structure.jpg')} srcSet={`${require('src/assets/structure/stb_tooltips-structure@2x.jpg')} 2x`} className=\"u-maxWidthFull\" alt=\"Tooltip\" />\n    <ol className=\"u-textGray u-marginTopTiny\">\n  <li>\n          Label\n    <i className=\"u-text200\"> - Showing the information which makes more sense for an element.</i>\n  </li>\n  <li>\n          Background\n    <i className=\"u-text200\"> - Default is transparent black background.</i>\n  </li>\n  <li>\n          Arrow\n    <i className=\"u-text200\"> - Depending on the direction of the tooltips to set a small arrow's position which can be on top, bottom, left of right.</i>\n  </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h3>\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`Overlay`}</inlineCode>{`  injected props directly to the `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` component.`}</p>\n    <CodeView codeText={basicOverlay} mdxType=\"CodeView\" />\n    <p>{`Or pass a `}<inlineCode parentName=\"p\">{`Tooltip`}</inlineCode>{` component to  `}<inlineCode parentName=\"p\">{`Overlay.Trigger`}</inlineCode>{` instead.`}</p>\n    <CodeView codeText={triggerOverlay} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"tooltip-placement\"\n    }}>{`Tooltip placement`}</h3>\n    <p>{`Short content.`}</p>\n    <CodeView codeText={shortTooltip} mdxType=\"CodeView\" />\n    <p>{`Long content.`}</p>\n    <CodeView codeText={longTooltip} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"white\"\n    }}>{`White`}</h3>\n    <CodeView codeText={shortTooltipWhite} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"delay\"\n    }}>{`Delay`}</h3>\n    <p>{`Basic delay.`}</p>\n    <CodeView codeText={basicDelay} mdxType=\"CodeView\" />\n    <p>{`If your want the tooltip not to disappear when you hover it, combine `}<inlineCode parentName=\"p\">{`delay`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`hoverOverlay`}</inlineCode>{`.`}</p>\n    <CodeView codeText={delayWithHoverOverlay} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"design-reference\"\n    }}>{`Design Reference`}</h2>\n    <p>{`N/A`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Overlay} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.OverlayTrigger} exportedBy={props.data.Overlay} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.Tooltip} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/stb_tooltips-structure@2x-2115e5e8628e38630ce3d5e06e6a572b.jpg\";","module.exports = __webpack_public_path__ + \"static/stb_tooltips-structure-cff8fbb9cdce9be2d1c0d4670a017672.jpg\";"],"sourceRoot":""}