{"version":3,"sources":["webpack:///./src/pages/components/buttons.mdx","webpack:///./src/assets/structure/stb_button-structure@2x.jpg","webpack:///./src/assets/structure/stb_button-structure.jpg"],"names":["_frontmatter","layoutProps","query","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","src","require","srcSet","alt","parentName","codeText","transparentBackground","exampleClassName","sizesButton","widthDefault","brandMicrosoft","brandGoogle","groupStylesButton","groupSizesButton","groupIconsButton","variant","metadata","data","Button","ButtonGroup","exportedBy","isMDXComponent","module","exports"],"mappings":"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","file":"component---src-pages-components-buttons-mdx-c60122df2d6ab0094208.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/uendno/source-code/gotit/aha/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from 'src/components/ComponentApi';\nimport CodeView from 'src/components/CodeView';\nimport { Button } from '@ahaui/react';\nimport sizesButton from 'src/examples/Button/size';\nimport widthDefault from 'src/examples/Button/widthDefault';\nimport brandMicrosoft from 'src/examples/Button/brandMicrosoft';\nimport brandGoogle from 'src/examples/Button/brandGoogle';\nimport groupStylesButton from 'src/examples/Button/groupStyles';\nimport groupIconsButton from 'src/examples/Button/groupIcons';\nimport groupSizesButton from 'src/examples/Button/groupSizes';\nexport const query = graphql`\n  query ButtonGroupQuery {\n    Button: componentMetadata(displayName: { eq: \"Button\" }) {\n      ...ComponentApi_metadata\n    }\n    ButtonGroup: componentMetadata(displayName: { eq: \"ButtonGroup\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"buttons\"\n    }}>{`Buttons`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`A button is a clickable item used to execute an action either in the background or foreground.`}</p>\n    <img className=\"u-maxWidthFull\" src={require('src/assets/structure/stb_button-structure.jpg')} srcSet={`${require('src/assets/structure/stb_button-structure@2x.jpg')} 2x`} alt=\"Button structure\" />\n    <ol className=\"u-paddingLeftLarge u-textGray u-marginTopTiny\">\n  <li>\n      Button text\n  </li>\n  <li>\n      Left icon\n  </li>\n  <li>\n      Right icon\n  </li>\n  <li>\n      Text underline&nbsp;\n    <i className=\"u-text200\">- The underline is used for button link hover state.</i>\n  </li>\n  <li>\n      Border\n  </li>\n  <li>\n      Background\n  </li>\n  <li>\n      Focus border\n  </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <p><strong parentName=\"p\">{`Primary`}</strong></p>\n    <p>{`Most of the time, a primary button is used when the consequent action is the main action of a layout.`}</p>\n    <CodeView codeText={`<Button variant=\"primary\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Secondary`}</strong></p>\n    <p>{`Secondary buttons are used to indicate supplementary actions`}</p>\n    <CodeView codeText={`<Button variant=\"secondary\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Primary Outline`}</strong></p>\n    <p>{`A primary outline button is used when the consequent action is considered less important than the primary button but more important than the secondary button.`}</p>\n    <CodeView codeText={`<Button variant=\"primary_outline\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Accent`}</strong></p>\n    <p>{`On some specific layouts (i.e. ask flow or payment), accent buttons overrule the primary buttons to indicate the most important actions.`}</p>\n    <CodeView codeText={`<Button variant=\"accent\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Positive`}</strong></p>\n    <p>{`Positive buttons are used for positive actions (i.e. when users finish a flow). They can be used to update the positive status of an action in view-only mode.`}</p>\n    <CodeView codeText={`<Button variant=\"positive\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Negative`}</strong></p>\n    <p>{`Negative buttons are used for negative actions (i.e. when users quit or stop an important flow).`}</p>\n    <CodeView codeText={`<Button variant=\"negative\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`White`}</strong></p>\n    <p>{`Using it as a primary button in color or dark background.`}</p>\n    <CodeView transparentBackground codeText={`<Button variant=\"white\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`White Ouline`}</strong></p>\n    <p>{`Using it as a secondary button in color or dark background.`}</p>\n    <CodeView exampleClassName=\"u-backgroundDark\" codeText={`<Button variant=\"white_outline\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Link`}</strong></p>\n    <p>{`The button link is the least prominent button. It's often standing next to other buttons to indicate a less important action.`}</p>\n    <p>{`Having paddings, a button link is different, and also, represents a more important action than a text link.`}</p>\n    <CodeView transparentBackground codeText={`<Button as={SafeAnchor} href=\"https://designsystem.got-it.io/\" variant=\"link\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h3>\n    <p><strong parentName=\"p\">{`Disabled`}</strong></p>\n    <p>{`Disabled buttons allow users to know the consequent actions but prevent them from executing these actions.`}</p>\n    <CodeView codeText={`<Button disabled>\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Sizes`}</strong></p>\n    <p>{`Similar to input forms, buttons have three sizes: Small (28px), Medium (default - 36px) and Large (48px).`}</p>\n    <CodeView codeText={sizesButton} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"widths\"\n    }}>{`Widths`}</h3>\n    <p><strong parentName=\"p\">{`Default`}</strong></p>\n    <p>{`Flexible with the label inside the button.`}</p>\n    <CodeView codeText={widthDefault} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Min width`}</strong></p>\n    <p>{`The minimum width is 112px.`}</p>\n    <CodeView codeText={`<Button width=\"min\">\n  <Button.Label>Ok</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Full width`}</strong></p>\n    <p>{`When a button’s width is set 100%, the button fully expands to the full width of its parent container.`}</p>\n    <CodeView codeText={`<Button width=\"full\">\n  <Button.Label>Button</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"buttons-with-icons\"\n    }}>{`Buttons with icons`}</h3>\n    <p><strong parentName=\"p\">{`Text & icon`}</strong></p>\n    <p>{`A button that contains a label and an icon on the left or right of the label.`}</p>\n    <CodeView codeText={`<Button>\n  <Button.Icon><Icon name=\"refresh\"/></Button.Icon>\n  <Button.Label>Refresh</Button.Label>\n</Button>`} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Orther Brand`}</strong></p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Microsoft`}</em></strong></p>\n    <CodeView codeText={brandMicrosoft} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Google`}</em></strong></p>\n    <CodeView codeText={brandGoogle} mdxType=\"CodeView\" />\n    <p><strong parentName=\"p\">{`Icon only`}</strong></p>\n    <p>{`A button that contains an icon only.`}</p>\n    <CodeView codeText={`<Button onlyIcon>\n  <Button.Icon><Icon name=\"refresh\"/></Button.Icon>\n</Button>`} mdxType=\"CodeView\" />\n    <h3 {...{\n      \"id\": \"button-group\"\n    }}>{`Button Group`}</h3>\n    <p>{`The Button Group component shares the same styles and state as normal Buttons.`}</p>\n    <CodeView codeText={groupStylesButton} mdxType=\"CodeView\" />\n    <p>{`The Button Group component shares the same sizes as normal Buttons. However, buttons in one group must be the same size.`}</p>\n    <CodeView codeText={groupSizesButton} mdxType=\"CodeView\" />\n    <CodeView codeText={groupIconsButton} mdxType=\"CodeView\" />\n    <h2 {...{\n      \"id\": \"design-reference\"\n    }}>{`Design Reference`}</h2>\n    <p>{`Two or more primary buttons should not be placed next to each other. Different than a primary button, two or more secondary buttons can be used in one layout.`}</p>\n    <div className=\"Grid u-marginBottomLarge\">\n  <div className=\"u-sizeFull md:u-size1of2\">\n    <div className=\"u-flex\">\n      <Button variant=\"secondary\" mdxType=\"Button\">Button</Button>\n      <Button className=\"u-marginLeftExtraSmall\" mdxType=\"Button\">Button</Button>\n    </div>\n    <div className=\"u-borderBottom u-borderLarge u-borderPositive u-marginTopSmall\" />\n    <div className=\"u-textPositive\">Do</div>\n  </div>\n  <div className=\"u-sizeFull md:u-size1of2\">\n    <div className=\"u-flex\">\n      <Button mdxType=\"Button\">Button</Button>\n      <Button className=\"u-marginLeftExtraSmall\" mdxType=\"Button\">Button</Button>\n    </div>\n    <div className=\"u-borderBottom u-borderLarge u-borderNegative u-marginTopSmall\" />\n    <div className=\"u-textNegative\">Don't</div>\n  </div>\n    </div>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Button} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ButtonGroup} exportedBy={props.data.Button} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/stb_button-structure@2x-2ff72e2ddbbf7f21afb26f5b25b006c7.jpg\";","module.exports = __webpack_public_path__ + \"static/stb_button-structure-4f5e906128eb2bed6baa879f15dce54b.jpg\";"],"sourceRoot":""}